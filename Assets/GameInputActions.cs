//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/GameInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputActions"",
    ""maps"": [
        {
            ""name"": ""mobile"",
            ""id"": ""e970efe8-863c-47ed-a4dc-7290b751fea2"",
            ""actions"": [
                {
                    ""name"": ""moveControl"",
                    ""type"": ""Value"",
                    ""id"": ""0059529e-da4a-405f-8931-466dbf538e6d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""cameraControl"",
                    ""type"": ""Value"",
                    ""id"": ""f151389f-c3c3-4005-85df-0102671dc81c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3d570c73-6861-4057-89bc-d134fa6847e4"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""moveControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0037f0a8-55d7-4bc0-b90a-a1ceeb157b89"",
                    ""path"": ""<Touchscreen>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""cameraControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PC"",
            ""id"": ""57dee5c6-2985-4a14-aa49-6c58b6bad21c"",
            ""actions"": [
                {
                    ""name"": ""CameraControl"",
                    ""type"": ""Value"",
                    ""id"": ""94f3605a-3fe0-41cb-91bf-a9893ebb5a23"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveControl"",
                    ""type"": ""Value"",
                    ""id"": ""212e7019-af35-43d2-8901-a5ab7fe772aa"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3a34c98d-4164-454f-ba7d-c1468301a2f6"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""92275ddd-aefb-4417-b6bb-866a7f640f7c"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // mobile
        m_mobile = asset.FindActionMap("mobile", throwIfNotFound: true);
        m_mobile_moveControl = m_mobile.FindAction("moveControl", throwIfNotFound: true);
        m_mobile_cameraControl = m_mobile.FindAction("cameraControl", throwIfNotFound: true);
        // PC
        m_PC = asset.FindActionMap("PC", throwIfNotFound: true);
        m_PC_CameraControl = m_PC.FindAction("CameraControl", throwIfNotFound: true);
        m_PC_MoveControl = m_PC.FindAction("MoveControl", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // mobile
    private readonly InputActionMap m_mobile;
    private List<IMobileActions> m_MobileActionsCallbackInterfaces = new List<IMobileActions>();
    private readonly InputAction m_mobile_moveControl;
    private readonly InputAction m_mobile_cameraControl;
    public struct MobileActions
    {
        private @GameInputActions m_Wrapper;
        public MobileActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @moveControl => m_Wrapper.m_mobile_moveControl;
        public InputAction @cameraControl => m_Wrapper.m_mobile_cameraControl;
        public InputActionMap Get() { return m_Wrapper.m_mobile; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MobileActions set) { return set.Get(); }
        public void AddCallbacks(IMobileActions instance)
        {
            if (instance == null || m_Wrapper.m_MobileActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MobileActionsCallbackInterfaces.Add(instance);
            @moveControl.started += instance.OnMoveControl;
            @moveControl.performed += instance.OnMoveControl;
            @moveControl.canceled += instance.OnMoveControl;
            @cameraControl.started += instance.OnCameraControl;
            @cameraControl.performed += instance.OnCameraControl;
            @cameraControl.canceled += instance.OnCameraControl;
        }

        private void UnregisterCallbacks(IMobileActions instance)
        {
            @moveControl.started -= instance.OnMoveControl;
            @moveControl.performed -= instance.OnMoveControl;
            @moveControl.canceled -= instance.OnMoveControl;
            @cameraControl.started -= instance.OnCameraControl;
            @cameraControl.performed -= instance.OnCameraControl;
            @cameraControl.canceled -= instance.OnCameraControl;
        }

        public void RemoveCallbacks(IMobileActions instance)
        {
            if (m_Wrapper.m_MobileActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMobileActions instance)
        {
            foreach (var item in m_Wrapper.m_MobileActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MobileActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MobileActions @mobile => new MobileActions(this);

    // PC
    private readonly InputActionMap m_PC;
    private List<IPCActions> m_PCActionsCallbackInterfaces = new List<IPCActions>();
    private readonly InputAction m_PC_CameraControl;
    private readonly InputAction m_PC_MoveControl;
    public struct PCActions
    {
        private @GameInputActions m_Wrapper;
        public PCActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @CameraControl => m_Wrapper.m_PC_CameraControl;
        public InputAction @MoveControl => m_Wrapper.m_PC_MoveControl;
        public InputActionMap Get() { return m_Wrapper.m_PC; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PCActions set) { return set.Get(); }
        public void AddCallbacks(IPCActions instance)
        {
            if (instance == null || m_Wrapper.m_PCActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PCActionsCallbackInterfaces.Add(instance);
            @CameraControl.started += instance.OnCameraControl;
            @CameraControl.performed += instance.OnCameraControl;
            @CameraControl.canceled += instance.OnCameraControl;
            @MoveControl.started += instance.OnMoveControl;
            @MoveControl.performed += instance.OnMoveControl;
            @MoveControl.canceled += instance.OnMoveControl;
        }

        private void UnregisterCallbacks(IPCActions instance)
        {
            @CameraControl.started -= instance.OnCameraControl;
            @CameraControl.performed -= instance.OnCameraControl;
            @CameraControl.canceled -= instance.OnCameraControl;
            @MoveControl.started -= instance.OnMoveControl;
            @MoveControl.performed -= instance.OnMoveControl;
            @MoveControl.canceled -= instance.OnMoveControl;
        }

        public void RemoveCallbacks(IPCActions instance)
        {
            if (m_Wrapper.m_PCActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPCActions instance)
        {
            foreach (var item in m_Wrapper.m_PCActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PCActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PCActions @PC => new PCActions(this);
    public interface IMobileActions
    {
        void OnMoveControl(InputAction.CallbackContext context);
        void OnCameraControl(InputAction.CallbackContext context);
    }
    public interface IPCActions
    {
        void OnCameraControl(InputAction.CallbackContext context);
        void OnMoveControl(InputAction.CallbackContext context);
    }
}
